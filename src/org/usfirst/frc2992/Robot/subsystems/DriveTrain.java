// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2992.Robot.subsystems;

import org.usfirst.frc2992.Robot.RobotMap;
import org.usfirst.frc2992.Robot.mhJoystick;
import org.usfirst.frc2992.Robot.mhRobotDrive;
import org.usfirst.frc2992.Robot.DualCoder;
import org.usfirst.frc2992.Robot.commands.*;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    private final Solenoid driveshifthighlow = RobotMap.driveShiftHighlow;
    private final mhRobotDrive mhRobotDrive = RobotMap.mhRobotDrive;
    private final AnalogGyro Gyro = RobotMap.driveTrainGyro;
    
    private final Encoder LeftEnc = RobotMap.lEncoder;
    private final Encoder RightEnc = RobotMap.rEncoder;
    
	
    
    DrivePID lDistance, rDistance;
    PIDController lDistPID, rDistPID;

    
    final double Dkp = 0.1;
    final double Dki = 0.0;
    final double Dkd = 0.0;
    
    RotatePID turn;
    PIDController turnPID;
    final double Rkp = 0.18;
    final double Rki = 0.0;
    final double Rkd = 0.70;
    
    
    double autoDist;
    double autoDegr;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public DriveTrain(){
    	super();
    	
		
    	lDistance = new DrivePID(this.mhRobotDrive.leftDriveMotors, Gyro);
    	lDistPID = new PIDController(Dkp, Dki, Dkd, LeftEnc, lDistance);
    	lDistPID.setOutputRange(-0.5, 0.5);
    	lDistPID.setInputRange(-240.0, 240.0);
    	lDistPID.setPercentTolerance(1.0);
    	lDistPID.disable();

    	
    	rDistance = new DrivePID(this.mhRobotDrive.rightDriveMotors, Gyro);
    	rDistPID = new PIDController(Dkp, Dki, Dkd, RightEnc, rDistance);
    	rDistPID.setOutputRange(-0.5, 0.5);
    	rDistPID.setInputRange(-240.0, 240.0);
    	rDistPID.setPercentTolerance(1.0);
    	rDistPID.disable();

    	
    	turn = new RotatePID(mhRobotDrive);
    	turnPID = new PIDController(Rkp, Rki, Rkd, Gyro, turn);
    	turnPID.setOutputRange(-0.5, 0.5);
    	turnPID.setInputRange(-360.0, 360.0);
    	turnPID.setContinuous();
    	turnPID.setAbsoluteTolerance(3);
    	turnPID.disable();
    	
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
    	
    	setDefaultCommand(new DriveSticks());
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void tankDrive(mhJoystick leftJoy, mhJoystick rightJoy){
    	
    	mhRobotDrive.tankDrive(leftJoy.getY(), rightJoy.getY());
    	
    }
    
    public void tankDriveRev(mhJoystick leftJoy, mhJoystick rightJoy){
    	
    	mhRobotDrive.tankDrive(-rightJoy.getY(), -leftJoy.getY());
    }
    
    public void tankDriveAuto(double left, double right){
    	
    	mhRobotDrive.tankDrive(left, right);
    }
    /*
     * in progress PID control
     */
    
	public void smartDrive(double Distance, double Degrees){
    	
		autoDist = Distance;
		autoDegr = Degrees;
    	
    	if(Math.abs(Distance) > 0.0 && Math.abs(Degrees) <= 0.01){
    		System.out.println("Driving forward");
    		turnPID.disable();
    		LeftEnc.reset();
    		RightEnc.reset();
    		lDistPID.setSetpoint(-Distance); // Left side is reversed
    		rDistPID.setSetpoint(Distance);
    		System.out.println("PID target set to: " + Distance);
    		lDistPID.enable();
    		rDistPID.enable();
    		
    	}else if(Math.abs(Degrees) > 0 && Math.abs(Distance) <= 0.01){
    		System.out.println("Turning");
    		/*lDistPID.disable();
    		rDistPID.disable();
    		turnPID.setSetpoint(Degrees);
    		turnPID.enable();*/
    		turnPID.disable();
    		LeftEnc.reset();
    		RightEnc.reset();
    		lDistPID.setSetpoint(-Degrees); // Left side is reversed
    		rDistPID.setSetpoint(-Degrees);
    		System.out.println("PID rotation set to: " + Degrees);
    		lDistPID.enable();
    		rDistPID.enable();
    		
    		
    	}else{
    		System.out.println("Stopping");
    		lDistPID.disable();
    		rDistPID.disable();
    		turnPID.disable();
    		allStop();
    	}
    }
    
	public boolean driveDone() {
		if (Math.abs(autoDist) > 0.0 && Math.abs(autoDegr) <= 0.1) {
			return lDistPID.onTarget() && rDistPID.onTarget();
		} else if (Math.abs(autoDegr) > 0.0 && Math.abs(autoDist) <= 0.1) {
			//return turnPID.onTarget();
			return lDistPID.onTarget() && rDistPID.onTarget();
		} else
			return true;
	}
    
    
    /*
     * stop all motors
     */
    public void allStop(){
    	mhRobotDrive.tankDrive(0, 0);
    }
}

