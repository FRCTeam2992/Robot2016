// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2992.Robot.subsystems;

import org.usfirst.frc2992.Robot.Robot;
import org.usfirst.frc2992.Robot.RobotMap;
import org.usfirst.frc2992.Robot.commands.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalOutput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Shooter extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController shooterwheel = RobotMap.shooterShooterwheel;
    private final Encoder ShootEnc = RobotMap.ShootEncoder;
    private final Relay ShootLight = RobotMap.PhotonCannon;
    
    PIDController ShootPID;
    
    private Joystick buttonbox  = Robot.oi.getSwitchbox();
    
    private double shootspeed;
    
    final double reversespeed = -.25;
    
    final double kP = 1.0;
    final double kI = 0.0;
    final double kD = 0.0;
    final double kF = 0.0;
    
    public final double PowerMax = 1.00;
	public final double SpeedMax = 10.0;
    
    public boolean shootOn = false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public boolean ShootOn(){
    	return shootOn;
    }
    
    public void shootHigh(){
    	
    	shootspeed = buttonbox.getX();

    	ShootEnc.reset();
    	
    	PIDController ShootPID = new PIDController(kP, kI, kD, kF, ShootEnc, shooterwheel);
    	ShootPID.setOutputRange(-PowerMax, PowerMax);
		ShootPID.setInputRange(-SpeedMax, SpeedMax);
		ShootPID.setPercentTolerance(1.0);
		ShootPID.setSetpoint(shootspeed);
		ShootPID.enable();
    	
    	shooterwheel.set(ShootPID.get());
    	
    	if(Robot.hood.IsHoodUp() == true && ShootPID.getError() > -.01 && ShootPID.getError() < .01){
    		shootOn = true;
    	} else {
    		shootOn = false;
    	}
    	SmartDashboard.putNumber("shooter wheel", ShootEnc.getRate());
    }
    
    public void reverse(){
    	shooterwheel.set(reversespeed);
    	shootOn = true;
    	SmartDashboard.putNumber("shooter wheel", ShootEnc.getRate());
    }
    
    public void stop(){
    	shooterwheel.set(0);
    	shootOn = false;
    	SmartDashboard.putNumber("shooter wheel", ShootEnc.getRate());
    }
}

