// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2992.Robot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DigitalOutput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.VictorSP;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.vision.USBCamera;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController rFWheel;
    public static SpeedController rMWheel;
    public static SpeedController rRWheel;
    public static SpeedController lFWheel;
    public static SpeedController lMWheel;
    public static SpeedController lRWheel;
    public static Encoder rEncoder;
    public static Encoder lEncoder;
    public static AnalogGyro driveTrainGyro;
    public static Solenoid driveShiftHighlow;
    public static SpeedController feedExternal;
    public static SpeedController feedInternal;
    public static DigitalInput feedLimit;
    public static DigitalInput shootReadyLeft;
    public static DigitalInput shootReadyRight;
	public static Relay photonCannon;
    public static Solenoid tailLong;
    public static Solenoid tailShort;
    public static Solenoid feedRA;
    public static Solenoid feedRB;
    public static Solenoid hoodUpDown;
    public static Solenoid hoodR;
    public static Solenoid armOutIn;
    public static SpeedController shooterShooterwheel;
    public static Encoder shootEncoder;
    
    public static org.usfirst.frc2992.Robot.mhRobotDrive mhRobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        rFWheel = new Talon(0);
        //LiveWindow.addActuator("DriveTrain", "Right front drive wheel", (Talon) RFWheel);
        
        rMWheel = new Talon(1);
        //LiveWindow.addActuator("DriveTrain", "Right mid drive wheel", (Talon) RMWheel);
        
        rRWheel = new VictorSP(2);
        //LiveWindow.addActuator("DriveTrain", "Right rear drive wheel", (VictorSP) RRWheel);
        
        lFWheel = new Talon(3);
        //LiveWindow.addActuator("DriveTrain", "Left front drive wheel", (Talon) LFWheel;
        
        lMWheel = new Talon(4);
        //LiveWindow.addActuator("DriveTrain", "Left mid drive wheel", (Talon) LMWheel);
        
        lRWheel = new VictorSP(5);
        //LiveWindow.addActuator("DriveTrain", "Left rear drive wheel", (VictorSP) LRWheel);
        
        //Check Distance Per Pulse
        rEncoder = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Right drive train encoder", rEncoder);
        rEncoder.setDistancePerPulse(3.1415 * 7.08 / 128.0 / 3.0 / 3.0); // inches
        rEncoder.setPIDSourceType(PIDSourceType.kDisplacement);
        
        lEncoder = new Encoder(0, 1, true, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Left drive train encoder", lEncoder);
        lEncoder.setReverseDirection(true);
        // Encoder 128ppr, 7.65in dia wheel, 3 enc revs per wheel rev
        lEncoder.setDistancePerPulse(3.1415 * 7.08 / 128.0 / 3.0 / 3.0); // inches
        lEncoder.setPIDSourceType(PIDSourceType.kDisplacement);
        
        driveTrainGyro = new AnalogGyro(0);
        driveTrainGyro.reset();
        LiveWindow.addSensor("DriveTrain", "Gyro", driveTrainGyro);
        driveTrainGyro.setSensitivity(0.007);
        
        driveShiftHighlow = new Solenoid(0, 4);
        LiveWindow.addActuator("DriveTrain", "Drive shift highlow", driveShiftHighlow);
        
        feedExternal = new Victor(8);
        LiveWindow.addActuator("extFeed", "Feeder wheel", (Victor) feedExternal);
        
        feedInternal= new Victor(7);
        LiveWindow.addActuator("intFeed", "Feeder wheel 2", (Victor) feedInternal);
        
        feedLimit = new DigitalInput(6);
        LiveWindow.addSensor("Feed", "Feeder system Limit switch", feedLimit);
        
        shootReadyLeft = new DigitalInput(7);
        
        shootReadyRight = new DigitalInput(8);
        
        photonCannon = new Relay(0);
        photonCannon.setDirection(Relay.Direction.kForward);
        
        tailLong = new Solenoid(0, 3);
        LiveWindow.addActuator("Feed", "Duck tail updown A", tailLong);
        
        tailShort = new Solenoid(0,2);
        LiveWindow.addActuator("Feed", "Duck tail updown B", tailShort);
        
        //feedRA = new Solenoid(0,3);
        
        //feedRB = new Solenoid(0,4);
        
        hoodUpDown = new Solenoid(0,0);
        
        //hoodR = new Solenoid(0,6);
        
        armOutIn = new Solenoid(0,1);
        LiveWindow.addActuator("Arm", "Arm Up Down", armOutIn);
        
        shooterShooterwheel = new Talon(6);
        LiveWindow.addActuator("Shooter", "Shooter wheel", (Talon) shooterShooterwheel);
        
        shootEncoder = new Encoder(4, 5, false, EncodingType.k1X);
        LiveWindow.addSensor("Shooter", "Shooter wheel encoder", shootEncoder);
        //Encoder 6" diameter, 128 ppr
        shootEncoder.setDistancePerPulse(60.0/20.0);
        shootEncoder.setSamplesToAverage(5);
        shootEncoder.setPIDSourceType(PIDSourceType.kRate);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        mhRobotDrive = new org.usfirst.frc2992.Robot.mhRobotDrive();
        
    }
}
